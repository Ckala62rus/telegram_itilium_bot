import json
import logging

import httpx
from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from httpx import Response
from sqlalchemy.ext.asyncio import AsyncSession

from api.itilium_api import ItiliumBaseApi
from bot_enums.user_enums import UserButtonText
from filters.chat_types import ChatTypeFilter
from fsm.user_fsm import CreateNewIssue
from kbds.inline import get_callback_btns
from kbds.reply import get_keyboard
from kbds.user_kbds import USER_MENU_KEYBOARD
from services.user_private_service import base_start_handler

new_user_router = Router()
new_user_router.message.filter(ChatTypeFilter(['private']))

logger = logging.getLogger(__name__)


@new_user_router.message(CommandStart())
async def start_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–π —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º. –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–∑–æ–≤
    –æ–±—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
    """

    logger.debug("Command start")
    logger.info(message.from_user.id)

    await base_start_handler(message)


@new_user_router.message(StateFilter('*'), F.text.casefold() == str(UserButtonText.CANCEL))
async def cancel_fsm_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer(
        str(UserButtonText.ACTIONS_CANCELED),
        reply_markup=types.ReplyKeyboardRemove()
    )


@new_user_router.message(Command("menu"))
@new_user_router.message(F.text == str(UserButtonText.MENU))
async def get_all_scs_types_handler_reply_markup(message: types.Message):
    """
    –ú–µ—Ç–æ–¥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ "—Ç–∏–ø–æ–≤" –∑–∞—è–≤–æ–∫, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –°–ø–∏—Å–æ–∫ "—Ç–∏–ø–æ–≤" –∑–∞—è–≤–æ–∫
    –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ IT/–Ω–µ—Ç)
    """

    logger.debug("command or message -> menu")

    # await message.delete()
    # remove_keyboard = await message.answer(text="...", reply_markup=types.ReplyKeyboardRemove())
    # await remove_keyboard.delete()

    # (todo –Ω—É–∂–Ω–æ —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç?) –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª–µ—Ç—Å—è –ª–∏ –æ–Ω –∫–ª—é—á–µ–≤—ã–º

    logger.debug("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=USER_MENU_KEYBOARD)
    await message.answer(
        text=str(UserButtonText.CHOOSE_MENY),
        # reply_markup=get_keyboard(str(UserButtonText.CANCEL))
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–≤–∞–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    # current_bot_users.add_current_session_mes_id_to_list(message.from_user.id, message.message_id)
    # current_bot_users.set_current_message_state(message.from_user.id, 'service_call')


@new_user_router.callback_query(StateFilter(None), F.data.startswith("crate_new_issue"))
async def start_command(callback: types.CallbackQuery, state: FSMContext):
    logger.debug("Perform callback command create_new_issue and get cancel button")
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è",
        reply_markup=get_keyboard(str(UserButtonText.CANCEL))
    )

    await state.set_state(CreateNewIssue.description)


@new_user_router.message(CreateNewIssue.description, F.text)
async def set_description_for_issue(
        message: types.Message,
        state: FSMContext
):
    logger.debug("enter description for new issue")

    if len(message.text) == 0:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≥–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    await state.update_data(description=message.text)

    logger.debug(f"get user information from itilium by telegram id {message.from_user.id}")
    user_data_from_itilium: dict | None = await ItiliumBaseApi.get_employee_data_by_identifier(message)

    if user_data_from_itilium is None:
        logger.debug("user not found in Itilium")
        await state.clear()
        await message.answer(
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ ITILIUM",
            reply_markup=types.ReplyKeyboardRemove()
        )

    # send date to itilium api for create issue
    response: Response = await ItiliumBaseApi.create_new_sc({
        "UUID": user_data_from_itilium["UUID"],
        "Description": message.text,
        "shortDescription": message.text,
    })

    logger.debug(f"{response.status_code} | {response.text}")

    if response.status_code == httpx.codes.OK:
        await message.answer(f"–í–∞—à–∞ –∑–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\r{json.loads(response.text)}")
    else:
        logger.debug(f"{response.text}")
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {response.text}\n\r–ü–æ–≤–æ—Ç—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")

    await state.clear()


@new_user_router.callback_query(F.data.startswith("accept$"))
async def btn_accept(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å"
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ"
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è, –ª–∏–±–æ –æ–± –æ—à–∏–±–∫–µ.
    –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å 'accept$000001844'
    """
    try:
        logger.debug(f"{callback.from_user.id} | {callback.data}")
        await ItiliumBaseApi.accept_callback_handler(callback)
        await callback.answer()
        await callback.message.answer("–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ")
    except Exception as e:
        logger.error(e)
        await callback.answer("–í–æ –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

    await callback.answer()


@new_user_router.callback_query(F.data.startswith("reject$"))
async def btn_reject(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è, –ª–∏–±–æ –æ–± –æ—à–∏–±–∫–µ.
    –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å 'reject$000001844'
    """
    try:
        logger.debug(f"{callback.from_user.id} | {callback.data}")
        await ItiliumBaseApi.reject_callback_handler(callback)
        await callback.answer()
        await callback.message.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(e)
        await callback.answer("–í–æ –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")


@new_user_router.callback_query(StateFilter(None), F.data.startswith("reply$"))
async def btn_reply_for_comment(
    callback: types.CallbackQuery,
    state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏
    (–ö–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ "–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É" –∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    """
    logger.debug(f"callback reply$ {callback.from_user.id} | {callback.data}")
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∞.",
        reply_markup=get_keyboard(str(UserButtonText.CANCEL))
    )
    await state.set_state(CreateComment.comment)
    await state.update_data(sc_id=callback.data[6:])


@new_user_router.message(CreateComment.comment, F.text)
async def set_comment_for_sc(
        message: types.Message,
        state: FSMContext
):
    data = await state.get_data()
    logger.debug(f"comment: {message.text}")
    logger.debug(f"{message.from_user.id} | {data["sc_id"]}")

    response: Response = await ItiliumBaseApi.add_comment_to_sc(
        telegram_user_id=message.from_user.id,
        comment=message.text,
        sc_number=data["sc_id"]
    )

    await state.clear()
    await message.answer(
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω",
        reply_markup=types.ReplyKeyboardRemove()
    )


@new_user_router.callback_query(StateFilter(None), F.data.startswith("show_sc$"))
async def show_sc_info_callback(callback: types.CallbackQuery):
    """
    –ú–µ—Ç–æ–¥, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â–∏–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ
    """
    logger.debug(f"{callback.data}")
    sc_number = callback.data[8:]
    logger.info(f"{sc_number}")
    response: dict | None = await ItiliumBaseApi.find_sc_by_id(callback.from_user.id, sc_number)
    await callback.answer()

    if response is None:
        return await callback.message.answer(f"–ó–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {sc_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = Helpers.prepare_sc(response)

    if response["state"] != 'registered':
        btn = get_callback_btns(
            btns={
                "–°–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Ü©Ô∏è": "del_message",
                "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É Ô∏è üõ†": "to_work{0}".format(sc_number),
            }
        )
    else:
        btn = get_callback_btns(
            btns={
                "–°–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Ü©Ô∏è": "del_message",
            }
        )

    await callback.message.answer(
        text=message_text,
        reply_markup= btn,
        parse_mode='HTML'
    )


@new_user_router.callback_query(StateFilter(None), F.data.startswith("del_message"))
async def show_sc_info_callback(callback: types.CallbackQuery):
    await callback.message.delete()


@new_user_router.callback_query()
async def btn_reject(callback: types.CallbackQuery):
    a = callback.data
    # show_sc$0000023773 –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É"
    # reply$0000023773 –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    logger.debug(f"{callback.from_user.id} | {callback.data}")
    await callback.answer()


@new_user_router.message(F.text)
async def magic_filter(message: types.Message):
    await message.answer(text="–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã (((")
